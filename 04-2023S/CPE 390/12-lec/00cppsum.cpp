#include <iostream>
using namespace std;

int main() {
  int a = 3 + 4;
  uint64_t b = 3 - 4;
  uint64_t c = 5 * 6;
  uint64_t d = 1000000 * 1000000;
  uint64_t e = 7 / 2;
  uint64_t f = 7 % 2;
  uint64_t g = -f;
  uint64_t h = c << 4;
  h >>= 2;  // h = h>>2
  //+=, -=, *=, /=, %=, <<=, >>=, &=, |=, ^=

  int64_t i = -3;
  i >>= 1;
  // Equivalent to ROR 3 or ROL by 61
  uint64_t j = (h << 3) | (h >> 61);
}

/*
421   u   s (2s compliment)
000   0   0
001   1   1
010   2   2
011   3   3
100   4   -4
101   5   -3
110   6   -2
111   7   -1
+1,
000   0    0

add unsidned (a+b) mod 8
unsigned
101 >> 1 = 010      5 / 2 = 2
010 << 1 = 100      2 * 2 = 4
010 << 5 = 000      2 * 32 = 0 (overflow)

Unsigned
1010 = 8 + 2 =10

2s Compliment
1010 => 1. 0101
     => 2. 0101 + 1 = 0110 = 6
1010 = -6

1. invert every bit
2. add 1

16 bit num
1111111100100101 =>
0000000011011010 =>
0000000011011011 = 128+64+16+8+2+1 = 219

0000000000000011
1111111111111100
1111111111111101 = -3

1111111111111101 >> 1 = 0111111111111110 positive now?
1111111111111110
0000000000000001 + 1
0000000000000010 = -2
*/